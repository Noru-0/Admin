<section>
    <div class="content">
        <h1 class="text-2xl font-bold mb-4">Product Management</h1>

        <div class="container-admin">
            <!-- Filter Options -->
            <div class="filter-options flex justify-between items-center mb-8">
                <!-- Search and Filter -->
                <div class="flex items-center space-x-4">
                    <input type="text" id="filter-name" placeholder="Search by product name..."
                        class="filter border border-gray-300 rounded px-3 py-2 w-48">

                    <select id="filter-category" class="filter border border-gray-300 rounded px-2 py-2 w-36">
                        <option value="all">All Category</option>
                        <option value="os">OS</option>
                        <option value="ram">RAM</option>
                        <option value="disk">Storage</option>
                        <option value="refreshRate">Refresh Rate</option>
                    </select>

                    <select id="filter-subcategory" class="filter border border-gray-300 rounded px-2 py-2 w-40">
                        <option value="all">All Subcategories</option>
                    </select>

                    <select id="filter-brand" class="filter border border-gray-300 rounded px-2 py-2 w-32">
                        <option value="all">All Brand</option>
                        <option value="Apple">Apple</option>
                        <option value="Samsung">Samsung</option>
                        <option value="Oppo">Oppo</option>
                        <option value="Xiaomi">Xiaomi</option>
                        <option value="Nubia">Nubia</option>
                    </select>

                    <button id="filter-button" class="text-white rounded">Filter</button>
                </div>

                <!-- Sort Options -->
                <div class="flex items-center space-x-4">
                    <label for="sort-by" class="text-gray-700 font-bold">Sort by:</label>
                    <select id="sort-by" class="filter border border-gray-300 rounded px-2 py-2 w-36">
                        <option value="none">None</option>
                        <option value="release_time">Released Time</option>
                        <option value="price">Price</option>
                        <option value="total_purchase">Total Purchase</option>
                    </select>
                    <select id="sort-order" class="filter border border-gray-300 rounded px-2 py-2">
                        <option value="asc">Ascending</option>
                        <option value="desc">Descending</option>
                    </select>
                    <button id="sort-button" class=" text-white rounded">Sort</button>
                </div>
            </div>

            <!-- product Table -->
            <div class="overflow-y-auto max-h-[40rem]">
                <table id="product-db" class="table-auto w-full text-left border-collapse border border-gray-300">
                    <thead class="bg-gray-100 sticky top-0">
                        <tr>
                            <th class="border border-gray-500 px-3 py-2 w-1/8">Product Name</th>
                            <th class="border border-gray-500 px-3 py-2 w-1/10">Brand</th>
                            <th class="border border-gray-500 px-3 py-2 w-1/10">OS</th>
                            <th class="border border-gray-500 px-3 py-2 w-1/18">RAM</th>
                            <th class="border border-gray-500 px-3 py-2 w-1/18">Storage</th>
                            <th class="border border-gray-500 px-3 py-2 w-1/18">Refresh</th>
                            <th class="border border-gray-500 px-3 py-2 w-1/18">Amount</th>
                            <th class="border border-gray-500 px-3 py-2 w-1/12">Price</th>
                            <th class="border border-gray-500 px-3 py-2 w-1/12">Total Purchases</th>
                            <th class="border border-gray-500 px-3 py-2 w-1/12">Released Time</th>
                            <th class="border border-gray-500 px-3 py-2 w-1/18">Select</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each products}}
                        <tr>
                            <td class="border border-gray-300 px-4 py-2">{{name}}</td>
                            <td class="border border-gray-300 px-4 py-2">{{brand}}</td>
                            <td class="border border-gray-300 px-4 py-2">{{os}}</td>
                            <td class="border border-gray-300 px-4 py-2">{{ram}}</td>
                            <td class="border border-gray-300 px-4 py-2">{{disk}}</td>
                            <td class="border border-gray-300 px-4 py-2">{{refreshRate}}</td>
                            <td class="border border-gray-300 px-4 py-2">{{number}}</td>
                            <td class="border border-gray-300 px-4 py-2">{{price}}</td>
                            <td class="border border-gray-300 px-4 py-2">{{totalPurchases}}</td>
                            <td class="border border-gray-300 px-4 py-2">{{release_time}}</td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>

            <!-- Action Buttons -->
            <div class="flex justify-between mt-4">
                <div>
                    <button id="edit-product-button" class="text-white px-6 py-2 bg-yellow-500 rounded">Edit</button>
                    <button id="delete-selected-button" class="text-white px-6 py-2 bg-red-500 rounded">Delete</button>
                </div>
                <!-- Pagination Controls -->
                <div id="pagination" class="flex justify-center gap-2">
                    <!-- Pagination buttons will be rendered here -->
                </div>
                <button id="add-product-button" class="text-white px-6 py-2 rounded">Add Product</button>
            </div>
        </div>
    </div>
</section>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // Fetch products with optional filters
        const fetchproducts = async (filters = {}, page = 1) => {
            filters.page = page;
            const params = new URLSearchParams(filters);
            const response = await fetch(`/admin/product/products?${params.toString()}`);
            if (response.ok) {
                const { products, totalPages } = await response.json();
                populateproductTable(products);
                renderPagination(totalPages, page, filters);
            } else {
                console.error("Error fetching products.");
            }
        };

        // Populate the product table
        const populateproductTable = (products) => {
            const tbody = document.querySelector("#product-db tbody");
            tbody.innerHTML = ""; // Clear existing rows

            products.forEach((product) => {
                const row = `
                    <tr>
                        <td>${product.name}</td>
                        <td>${product.brand}</td>
                        <td>${product.os}</td>
                        <td>${product.ram} GB</td>
                        <td>${product.disk} GB</td>
                        <td>${product.refreshRate} Hz</td>
                        <td>${product.number}</td>
                        <td>${product.price.toLocaleString('vi-VN')}</td>
                        <td>${product.totalPurchase}</td>
                        <td>${new Date(product.release_time).toLocaleString('vi-VN')}</td>
                        <td class="border border-gray-300 px-4 py-2 text-center">
                            <input type="checkbox" class="select-product" data-id="${product.id}">
                        </td>
                    </tr>
                `;
                tbody.insertAdjacentHTML("beforeend", row);
            });
        };

        // Render pagination controls
        const renderPagination = (totalPages, currentPage, filters) => {
            const paginationContainer = document.getElementById("pagination");
            pagination.innerHTML = ""; // Clear existing controls

            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement("button");
                button.textContent = i;
                button.classList.add("px-3", "py-1", "border", "mx-1", "rounded");

                if (i === currentPage) {
                    button.classList.add("bg-blue-600", "text-white");
                } else {
                    button.classList.add("bg-white", "text-blue-600");
                    button.addEventListener("click", () => fetchproducts(filters, i));
                }

                paginationContainer.appendChild(button);
            }
        };

        // Add event listeners for buttons
        document.getElementById("edit-product-button").addEventListener("click", async () => {
            const selectedCheckbox = document.querySelector(".select-product:checked");
            if (selectedCheckbox) {
                const productId = selectedCheckbox.getAttribute("data-id");

                // Fetch product details for editing
                const response = await fetch(`/admin/product/products/${productId}`, { method: "GET" });
                if (response.ok) {
                    const product = await response.json();
                    showEditForm(product);
                } else {
                    alert("Error fetching product details.");
                }
            } else {
                alert("Please select one product to edit.");
            }
        });

        document.getElementById("delete-selected-button").addEventListener("click", async () => {
            const selectedCheckboxes = document.querySelectorAll(".select-product:checked");
            const productIds = Array.from(selectedCheckboxes).map((checkbox) => checkbox.getAttribute("data-id"));

            if (productIds.length > 0) {
                console.log("Deleting products with IDs:", productIds);
                if (confirm("Are you sure you want to delete the selected products?")) {
                    for (const productId of productIds) {
                        const response = await fetch(`/admin/product/products/${productId}`, { method: "DELETE" });
                        if (!response.ok) {
                            alert(`Error deleting product with ID: ${productId}`);
                        }
                    }
                    alert("Products deleted.");
                    fetchproducts(); // Refresh table
                }
            } else {
                alert("Please select at least one product to delete.");
            }
        });

        const subcategories = {
            os: ["Android", "iOS"],
            ram: ["4GB", "8GB", "16GB", "32GB"],
            disk: ["32GB", "64GB", "128GB", "256GB", "512GB", "1TB"],
            refreshRate: ["60Hz", "90Hz", "120Hz", "144Hz"]
        };

        const filterCategory = document.getElementById("filter-category");
        const filterSubcategory = document.getElementById("filter-subcategory");

        // Update subcategories based on selected category
        filterCategory.addEventListener("change", () => {
            const selectedCategory = filterCategory.value;
            filterSubcategory.innerHTML = ""; // Clear existing options

            if (selectedCategory === "all") {
                filterSubcategory.innerHTML = `<option value="all">All Subcategories</option>`;
            } else {
                const options = subcategories[selectedCategory] || [];
                filterSubcategory.innerHTML = `<option value="all">All Subcategories</option>`;
                options.forEach(option => {
                    const optionElement = document.createElement("option");
                    optionElement.value = option;
                    optionElement.textContent = option;
                    filterSubcategory.appendChild(optionElement);
                });
            }
        });

        // Filter button logic
        document.getElementById("filter-button").addEventListener("click", () => {
            const name = document.getElementById("filter-name").value.trim();
            const category = document.getElementById("filter-category").value;
            const subcategory = document.getElementById("filter-subcategory").value;
            const brand = document.getElementById("filter-brand").value;

            // Remove "GB" from ram and "Hz" from refreshRate before sending to the backend
            let modifiedSubcategory = subcategory;
            if (subcategory && subcategory !== "all") {
                if (category === "ram") {
                    modifiedSubcategory = parseInt(subcategory.replace("GB", ""), 10);  // Remove "GB" from RAM values and convert to integer
                } else if (category === "refreshRate") {
                    modifiedSubcategory = parseInt(subcategory.replace("Hz", ""), 10);  // Remove "Hz" from refresh rate values and convert to integer
                }
            }

            // Only send filters that are applied
            const filters = {};
            if (name) filters.name = name;
            if (category && category !== "all") filters.category = category;
            if (modifiedSubcategory && modifiedSubcategory !== "all") filters.subcategory = modifiedSubcategory;
            if (brand && brand !== "all") filters.brand = brand;

            fetchproducts(filters);
        });

        // Sort button logic
        document.getElementById("sort-button").addEventListener("click", () => {
            const sortBy = document.getElementById("sort-by").value;
            const sortOrder = document.getElementById("sort-order").value;

            const filters = {};
            if (sortBy && sortBy !== "none") filters.sortBy = sortBy;
            if (sortOrder) filters.sortOrder = sortOrder;

            fetchproducts(filters);
        });

        // Show the edit form with the current product details
        const showEditForm = (product) => {
            const content = document.querySelector(".content");
            content.innerHTML = `
            <div class="content">
                <h1 class="text-2xl font-bold mb-4">Edit Product: ${product.name}</h1>
                <div class="container-admin bg-white p-5 rounded-lg shadow-md">
                    <form id="edit-product-form" class="form-container-product-manager">
                        <div class="form-group-product-manager mb-4">
                            <label for="name" class="font-semibold">Name:</label>
                            <input type="text" id="name" value="${product.name}" class="w-full border border-gray-300 rounded-md px-2 py-1">
                        </div>
                        <div class="form-group-product-manager mb-4">
                            <label for="brand" class="font-semibold">Brand:</label>
                            <input type="text" id="brand" value="${product.brand}" class="w-full border border-gray-300 rounded-md px-2 py-1">
                        </div>
                        <div class="form-group-product-manager mb-4">
                            <label for="price" class="font-semibold">Price:</label>
                            <input type="number" id="price" value="${product.price}" class="w-full border border-gray-300 rounded-md px-2 py-1">
                        </div>
                        <div class="form-group-product-manager mb-4">
                            <label for="chipset" class="font-semibold">Chipset:</label>
                            <input type="text" id="chipset" value="${product.chipset}" class="w-full border border-gray-300 rounded-md px-2 py-1">
                        </div>
                        <div class="form-group-product-manager mb-4">
                            <label for="os" class="font-semibold">OS:</label>
                            <input type="text" id="os" value="${product.os}" class="w-full border border-gray-300 rounded-md px-2 py-1">
                        </div>
                        <div class="form-group-product-manager mb-4">
                            <label for="ram" class="font-semibold">RAM:</label>
                            <input type="number" id="ram" value="${product.ram}" class="w-full border border-gray-300 rounded-md px-2 py-1">
                        </div>
                        <div class="form-group-product-manager mb-4">
                            <label for="disk" class="font-semibold">Disk:</label>
                            <input type="number" id="disk" value="${product.disk}" class="w-full border border-gray-300 rounded-md px-2 py-1">
                        </div>
                        <div class="form-group-product-manager mb-4">
                            <label for="screenSize" class="font-semibold">Screen Size:</label>
                            <input type="number" step="0.1" id="screenSize" value="${product.screenSize}" class="w-full border border-gray-300 rounded-md px-2 py-1">
                        </div>
                        <div class="form-group-product-manager mb-4">
                            <label for="refreshRate" class="font-semibold">Refresh Rate:</label>
                            <input type="number" id="refreshRate" value="${product.refreshRate}" class="w-full border border-gray-300 rounded-md px-2 py-1">
                        </div>
                        <div class="form-group-product-manager mb-4">
                            <label for="isFeatured" class="font-semibold">Is Featured:</label>
                            <input type="checkbox" id="isFeatured" ${product.isFeatured ? "checked" : ""} class="ml-2">
                        </div>
                        <div class="form-group-product-manager mb-4">
                            <label for="images" class="font-semibold">Images:</label>
                            <div id="current-images" class="flex gap-2 flex-wrap mb-2">
                            ${product.images.map((image, index) => `
                                <div class="relative">
                                <img src="${image}" alt="Image ${index + 1}" class="w-24 h-24 rounded-md border">
                                <button type="button" class="absolute top-0 right-0 bg-red-500 text-white text-xs px-1 py-0.5 rounded-full" onclick="removeImage(${index})">x</button>
                                </div>
                            `).join('')}
                            </div>
                            <input type="file" id="new-images" multiple accept="image/*" class="w-full border border-gray-300 rounded-md px-2 py-1">
                        </div>
                        <div class="form-group-product-manager mb-4">
                            <label for="shortDescription" class="font-semibold">Short Description:</label>
                            <textarea id="shortDescription" class="w-full border border-gray-300 rounded-md px-2 py-1">${product.shortDescription}</textarea>
                        </div>
                        <div class="form-group-product-manager mb-4">
                            <label for="longDescription" class="font-semibold">Long Description:</label>
                            <textarea id="longDescription" class="w-full border border-gray-300 rounded-md px-2 py-1">${product.longDescription}</textarea>
                        </div>
                        <div class="form-group-product-manager mb-4">
                            <label for="promotion" class="font-semibold">Promotion:</label>
                            <input type="number" step="0.01" id="promotion" value="${product.promotion}" class="w-full border border-gray-300 rounded-md px-2 py-1">
                        </div>
                        <div class="form-group-product-manager mb-4">
                            <label for="number" class="font-semibold">Number:</label>
                            <input type="number" id="number" value="${product.number}" class="w-full border border-gray-300 rounded-md px-2 py-1">
                        </div>
                        <div class="form-action-product-manager flex justify-between mt-4">
                            <button type="submit" class="btn bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600">Save</button>
                            <button type="button" class="btn bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600" id="cancel-edit">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
            `;

            // Track removed images and new images
            let imagesToRemove = [];
            let newImages = [];

            // Function to remove an image from the product
            window.removeImage = (index) => {
                imagesToRemove.push(product.images[index]); // Track removed image
                const updatedImages = [...product.images];
                updatedImages.splice(index, 1); // Remove image from cloned array
                product.images = updatedImages; // Update product images
                // Update the UI for current images
                const currentImagesContainer = document.getElementById("current-images");
                currentImagesContainer.innerHTML = product.images.map((image, i) => `
                    <div class="relative">
                        <img src="${image}" alt="Image ${i + 1}" class="w-24 h-24 rounded-md border">
                        <button type="button" class="absolute top-0 right-0 bg-red-500 text-white text-xs px-1 py-0.5 rounded-full" onclick="removeImage(${i})">x</button>
                    </div>
                `).join('');
            };
            console.log("imagesToRemove:", imagesToRemove);

            // Handle new images
            document.getElementById("new-images").addEventListener("change", (event) => {
                const files = Array.from(event.target.files);

                // Validate file types (e.g., allow only JPEG, PNG)
                const validFiles = files.filter((file) =>
                    ["image/jpeg", "image/png", "image/jpg"].includes(file.type)
                );

                if (validFiles.length !== files.length) {
                    alert("Only JPEG, JPG, and PNG files are allowed.");
                }

                // Append valid files to newImages
                newImages.push(...validFiles);

                // Display selected images in the interface
                const previewContainer = document.getElementById("current-images");
                validFiles.forEach((file) => {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const imageElement = document.createElement("div");
                        imageElement.classList.add("relative");

                        imageElement.innerHTML = `
                            <img src="${e.target.result}" alt="Preview Image" class="w-24 h-24 rounded-md border">
                            <button type="button" class="absolute top-0 right-0 bg-red-500 text-white text-xs px-1 py-0.5 rounded-full">x</button>
                        `;

                        // Add functionality to remove the preview
                        imageElement.querySelector("button").addEventListener("click", () => {
                            const indexToRemove = newImages.findIndex(
                                (item) => item === file
                            );
                            if (indexToRemove !== -1) {
                                newImages.splice(indexToRemove, 1);
                            }
                            previewContainer.removeChild(imageElement);
                        });

                        previewContainer.appendChild(imageElement);
                    };
                    reader.readAsDataURL(file); // Convert image to base64 URL
                });
            });

            // Handle form submission
            document.getElementById("edit-product-form").addEventListener("submit", async (event) => {
                event.preventDefault();

                const productName = document.getElementById("name").value.trim();

                // Check if the product name has changed
                if (productName !== product.name) {
                    // Check if the product name already exists
                    const isDuplicate = await checkProductNameDuplicate(productName);
                    console.log("isDuplicate:", isDuplicate);
                    if (isDuplicate) {
                        alert('Product name already exists. Please choose a different name.');
                        return; // Prevent form submission if the name is duplicate
                    }
                }

                const updatedProduct = {
                    name: document.getElementById("name").value,
                    brand: document.getElementById("brand").value,
                    price: parseFloat(document.getElementById("price").value),
                    chipset: document.getElementById("chipset").value,
                    os: document.getElementById("os").value,
                    ram: parseInt(document.getElementById("ram").value, 10),
                    disk: parseInt(document.getElementById("disk").value, 10),
                    screenSize: parseFloat(document.getElementById("screenSize").value),
                    refreshRate: parseInt(document.getElementById("refreshRate").value, 10),
                    isFeatured: document.getElementById("isFeatured").checked,
                    shortDescription: document.getElementById("shortDescription").value,
                    longDescription: document.getElementById("longDescription").value,
                    promotion: parseFloat(document.getElementById("promotion").value),
                    number: parseInt(document.getElementById("number").value, 10),
                    images: product.images
                };

                // Check if numeric values are greater than 0
                if (updatedProduct.price <= 0 || updatedProduct.ram <= 0 || updatedProduct.disk <= 0 || updatedProduct.screenSize <= 0 || updatedProduct.refreshRate <= 0 || updatedProduct.promotion < 0 || updatedProduct.number < 0) {
                    alert("All numeric values must be greater than 0.");
                    return;
                }

                const formData = new FormData();
                for (const key in updatedProduct) {
                    if (key !== 'images') {
                        formData.append(key, updatedProduct[key]);
                    }
                }

                // Add removed images
                imagesToRemove.forEach((image) => {
                    formData.append("removedImages", image);
                });

                // Add new images
                newImages.forEach((file) => {
                    formData.append("newImages", file);
                });

                try {
                    const response = await fetch(`/admin/product/products/${product.id}`, {
                        method: "PUT",
                        body: formData,
                    });
                    console.log("response:", response);

                    if (response.ok) {
                        alert("Product updated successfully!");
                        location.reload();
                    } else {
                        alert("Error updating product.");
                    }
                } catch (error) {
                    console.error("Error:", error);
                    alert("An error occurred while updating the product.");
                }
            });

            // Cancel edit
            document.getElementById("cancel-edit").addEventListener("click", () => {
                location.reload(); // Reload the page to return to the table view
            });
        };

        // Handle Add product button
        document.getElementById("add-product-button").addEventListener("click", () => {
            showAddForm();
        });

        // Show the add form
        const showAddForm = () => {
            const content = document.querySelector(".content");
            content.innerHTML = `
                <div class="content">
                    <h1 class="text-2xl font-bold mb-4">Add New Product</h1>
                    <div class="container-admin bg-white p-5 rounded-lg shadow-md" style="max-height: 550px; max-width: w-full; overflow-y: auto; overflow-x: hidden;">
                        <form id="add-product-form" class="form-container-product-manager">
                            <div class="form-group-product-manager mb-4 flex items-center">
                                <label for="name" class="font-semibold w-1/5">Name:</label>
                                <input type="text" id="name" required class="w-full border border-gray-300 rounded-md px-2 py-1">
                            </div>
                            <div class="form-group-product-manager mb-4 flex items-center">
                                <label for="brand" class="font-semibold w-1/5">Brand:</label>
                                <input type="text" id="brand" required class="w-full border border-gray-300 rounded-md px-2 py-1">
                            </div>
                            <div class="form-group-product-manager mb-4 flex items-center">
                                <label for="price" class="font-semibold w-1/5">Price:</label>
                                <input type="number" id="price" required class="w-full border border-gray-300 rounded-md px-2 py-1">
                            </div>
                            <div class="form-group-product-manager mb-4 flex items-center">
                                <label for="chipset" class="font-semibold w-1/5">Chipset:</label>
                                <input type="text" id="chipset" required class="w-full border border-gray-300 rounded-md px-2 py-1">
                            </div>
                            <div class="form-group-product-manager mb-4 flex items-center">
                                <label for="os" class="font-semibold w-1/5">OS:</label>
                                <input type="text" id="os" required class="w-full border border-gray-300 rounded-md px-2 py-1">
                            </div>
                            <div class="form-group-product-manager mb-4 flex items-center">
                                <label for="ram" class="font-semibold w-1/5">RAM:</label>
                                <input type="number" id="ram" required class="w-full border border-gray-300 rounded-md px-2 py-1">
                            </div>
                            <div class="form-group-product-manager mb-4 flex items-center">
                                <label for="disk" class="font-semibold w-1/5">Disk:</label>
                                <input type="number" id="disk" required class="w-full border border-gray-300 rounded-md px-2 py-1">
                            </div>
                            <div class="form-group-product-manager mb-4 flex items-center">
                                <label for="screenSize" class="font-semibold w-1/5">Screen Size:</label>
                                <input type="number" step="0.1" id="screenSize" required class="w-full border border-gray-300 rounded-md px-2 py-1">
                            </div>
                            <div class="form-group-product-manager mb-4 flex items-center">
                                <label for="refreshRate" class="font-semibold w-1/5">Refresh Rate:</label>
                                <input type="number" id="refreshRate" required class="w-full border border-gray-300 rounded-md px-2 py-1">
                            </div>
                            <div class="form-group-product-manager mb-4 flex items-center">
                                <label for="isFeatured" class="font-semibold w-1/5">Is Featured:</label>
                                <input type="checkbox" id="isFeatured" class="ml-2">
                            </div>
                            <div class="form-group-product-manager mb-4 flex items-center">
                                <label for="imageUrl" class="font-semibold w-1/5">Image:</label>
                                <input type="file" name="images" id="images" accept="image/*" multiple class="w-full border border-gray-300 rounded-md px-2 py-1">
                            </div>
                            <div class="form-group-product-manager mb-4 flex items-center">
                                <label for="shortDescription" class="font-semibold w-1/5">Short Description:</label>
                                <textarea id="shortDescription" required class="w-full border border-gray-300 rounded-md px-2 py-1"></textarea>
                            </div>
                            <div class="form-group-product-manager mb-4 flex items-center">
                                <label for="longDescription" class="font-semibold w-1/5">Long Description:</label>
                                <textarea id="longDescription" required class="w-full border border-gray-300 rounded-md px-2 py-1"></textarea>
                            </div>
                            <div class="form-group-product-manager mb-4 flex items-center">
                                <label for="promotion" class="font-semibold w-1/5">Promotion:</label>
                                <input type="number" step="0.01" id="promotion" required class="w-full border border-gray-300 rounded-md px-2 py-1">
                            </div>
                            <div class="form-group-product-manager mb-4 flex items-center">
                                <label for="number" class="font-semibold w-1/5">Number:</label>
                                <input type="number" id="number" required class="w-full border border-gray-300 rounded-md px-2 py-1">
                            </div>
                            <div class="form-action-product-manager flex justify-between mt-4">
                                <button type="submit" class="btn bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600">Save</button>
                                <button type="button" class="btn bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600" id="cancel-add">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
                `;

            // Handle form submission for adding product
            document.getElementById("add-product-form").addEventListener("submit", async (event) => {
                event.preventDefault();

                const productName = document.getElementById("name").value.trim();

                // Check if the product name already exists
                const isDuplicate = await checkProductNameDuplicate(productName);
                console.log("isDuplicate:", isDuplicate);
                if (isDuplicate) {
                    alert('Product name already exists. Please choose a different name.');
                    return; // Prevent form submission if the name is duplicate
                }

                const price = parseFloat(document.getElementById("price").value);
                const ram = parseInt(document.getElementById("ram").value, 10);
                const disk = parseInt(document.getElementById("disk").value, 10);
                const screenSize = parseFloat(document.getElementById("screenSize").value);
                const refreshRate = parseInt(document.getElementById("refreshRate").value, 10);
                const promotion = parseFloat(document.getElementById("promotion").value);
                const number = parseInt(document.getElementById("number").value, 10);

                // Check if numeric values are greater than 0
                if (price <= 0 || ram <= 0 || disk <= 0 || screenSize <= 0 || refreshRate <= 0 || promotion < 0 || number <= 0) {
                    alert("All numeric values must be greater than 0.");
                    return;
                }

                const formData = new FormData();
                formData.append("name", document.getElementById("name").value);
                formData.append("brand", document.getElementById("brand").value);
                formData.append("price", price);
                formData.append("chipset", document.getElementById("chipset").value);
                formData.append("os", document.getElementById("os").value);
                formData.append("ram", ram);
                formData.append("disk", disk);
                formData.append("screenSize", screenSize);
                formData.append("refreshRate", refreshRate);
                formData.append("isFeatured", document.getElementById("isFeatured").checked);
                formData.append("shortDescription", document.getElementById("shortDescription").value);
                formData.append("longDescription", document.getElementById("longDescription").value);
                formData.append("promotion", promotion);
                formData.append("number", number);

                // Add multiple images
                const imageFiles = document.getElementById("images").files;
                for (let i = 0; i < imageFiles.length; i++) {
                    formData.append("images", imageFiles[i]); // Append each image file
                }

                try {
                    const response = await fetch('/admin/product/products', {
                        method: 'POST',
                        body: formData,
                    });

                    if (response.ok) {
                        alert('Product added successfully!');
                        location.reload();
                    } else {
                        const error = await response.json();
                        alert(error.message || 'Error adding product.');
                    }
                } catch (error) {
                    console.error("Error:", error);
                    alert('Error connecting to the server.');
                }
            });

            document.getElementById("cancel-add").addEventListener("click", () => {
                location.reload();
            });
        };

        // Function to check if the product name is a duplicate
        const checkProductNameDuplicate = async (productName) => {
            try {
                const formatName = productName.toLowerCase().replace(/ /g, '-');
                const response = await fetch(`/admin/product/products/check-name?name=${formatName}`);
                if (response.ok) {
                    const result = await response.json();
                    return result.isDuplicate; // Assuming the response returns { isDuplicate: true/false }
                } else {
                    console.error("Error checking product name.");
                    return false;
                }
            } catch (error) {
                console.error("Error checking product name:", error);
                return false;
            }
        };

        // Initial load (fetch all products)
        fetchproducts();
    });
</script>